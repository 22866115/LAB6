
POSTLAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1b  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000805  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f0  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000215  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3d       	cpi	r26, 0xD4	; 212
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  8e:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
// -----------------------------
// INICIALIZACIÓN UART
// -----------------------------
void UART_init(unsigned int ubrr) {
	// Configura el Baud Rate
	UBRR0H = (unsigned char)(ubrr >> 8);  // Parte alta del baudrate
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Parte baja del baudrate
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilita transmisión y recepción UART
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configura el formato: 8 bits de datos, 1 bit de parada, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <UART_send>:
}

// Transmite un solo carácter por UART
void UART_send(char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera a que el buffer esté vacío
  ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <UART_send>
	UDR0 = data;                       // Envía el dato
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b8:	08 95       	ret

000000ba <UART_send_string>:
}

// Transmite una cadena de texto por UART
void UART_send_string(const char* str) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
	while (*str) {
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <UART_send_string+0xe>
		UART_send(*str++);  // Envía carácter por carácter
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	0e 94 56 00 	call	0xac	; 0xac <UART_send>
	UDR0 = data;                       // Envía el dato
}

// Transmite una cadena de texto por UART
void UART_send_string(const char* str) {
	while (*str) {
  c8:	88 81       	ld	r24, Y
  ca:	81 11       	cpse	r24, r1
  cc:	fa cf       	rjmp	.-12     	; 0xc2 <UART_send_string+0x8>
		UART_send(*str++);  // Envía carácter por carácter
	}
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <UART_receive>:

// Recibe un carácter por UART
char UART_receive(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Espera a recibir un dato
  d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	88 23       	and	r24, r24
  da:	e4 f7       	brge	.-8      	; 0xd4 <UART_receive>
	return UDR0;                      // Devuelve el carácter recibido
  dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  e0:	08 95       	ret

000000e2 <UART_send_number>:

// Convierte un número entero a string y lo envía por UART
void UART_send_number(uint16_t num) {
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <UART_send_number+0x6>
  e8:	00 d0       	rcall	.+0      	; 0xea <UART_send_number+0x8>
  ea:	00 d0       	rcall	.+0      	; 0xec <UART_send_number+0xa>
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  f0:	4a e0       	ldi	r20, 0x0A	; 10
  f2:	be 01       	movw	r22, r28
  f4:	6f 5f       	subi	r22, 0xFF	; 255
  f6:	7f 4f       	sbci	r23, 0xFF	; 255
  f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__itoa_ncheck>
	char buffer[6];                   // Buffer para máximo "65535\0"
	itoa(num, buffer, 10);            // Convierte número a cadena (base 10)
	UART_send_string(buffer);        // Envío de cadena
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
}
 104:	26 96       	adiw	r28, 0x06	; 6
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <ADC_init>:

// -----------------------------
// INICIALIZACIÓN ADC (Conversor Analógico-Digital)
// -----------------------------
void ADC_init(void) {
	ADMUX = (1 << REFS0);  // Usa AVcc como referencia de voltaje, selecciona canal 0 (A0)
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
 11c:	86 e8       	ldi	r24, 0x86	; 134
 11e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 122:	08 95       	ret

00000124 <ADC_read>:
	// Habilita el ADC y configura prescaler a 64 ? ADC más estable
}

// Lee el valor analógico de un canal del ADC (ej. canal 0 = A0)
uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); // Selecciona el canal del ADC sin alterar bits de referencia
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                    // Inicia la conversión
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));             // Espera a que termine
 13c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 140:	86 fd       	sbrc	r24, 6
 142:	fc cf       	rjmp	.-8      	; 0x13c <ADC_read+0x18>
	return ADC;                               // Devuelve el valor (0–1023)
 144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 148:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 14c:	08 95       	ret

0000014e <main>:

// -----------------------------
// FUNCIÓN PRINCIPAL
// -----------------------------
int main(void) {
	UART_init(103); // Inicializa UART para 9600 baudios (con F_CPU = 16MHz)
 14e:	87 e6       	ldi	r24, 0x67	; 103
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	ADC_init();     // Inicializa el ADC
 156:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_init>

	DDRC = 0xFF;    // Configura todos los pines de PORTC (A0-A7) como salida (para los LEDs)
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	87 b9       	out	0x07, r24	; 7

	while (1) {
		// Muestra el menú de opciones en el monitor serial
		UART_send_string("\nElija una opcion:\r\n");
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
		UART_send_string("1. Leer Potenciometro\r\n");
 166:	85 e1       	ldi	r24, 0x15	; 21
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
		UART_send_string("2. Enviar ASCII\r\n");
 16e:	8d e2       	ldi	r24, 0x2D	; 45
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>

		char opcion = UART_receive();  // Espera la opción del usuario
 176:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_receive>

		// --- OPCIÓN 1: LEER POTENCIÓMETRO ---
		if (opcion == '1') {
 17a:	81 33       	cpi	r24, 0x31	; 49
 17c:	f9 f4       	brne	.+62     	; 0x1bc <main+0x6e>
			UART_send_string("Valor del potenciometro (0-1023). Presione 'q' para salir:\r\n");
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
			while (1) {
				uint16_t valor = ADC_read(0);  // Lee el valor del potenciómetro conectado a A0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 92 00 	call	0x124	; 0x124 <ADC_read>
				UART_send_number(valor);       // Lo envía por serial
 18c:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_send_number>
				UART_send_string("\r\n");
 190:	81 ed       	ldi	r24, 0xD1	; 209
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	85 ea       	ldi	r24, 0xA5	; 165
 19c:	9e e0       	ldi	r25, 0x0E	; 14
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x50>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x5a>
 1a8:	00 00       	nop
				_delay_ms(300);                // Pequeña pausa para no saturar el monitor

				// Si el usuario presiona 'q', se sale de esta opción
				if (UCSR0A & (1 << RXC0)) {    // Verifica si se recibió algo por UART
 1aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ae:	88 23       	and	r24, r24
 1b0:	54 f7       	brge	.-44     	; 0x186 <main+0x38>
					char salir = UART_receive();
 1b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_receive>
					if (salir == 'q') break;
 1b6:	81 37       	cpi	r24, 0x71	; 113
 1b8:	31 f7       	brne	.-52     	; 0x186 <main+0x38>
 1ba:	d1 cf       	rjmp	.-94     	; 0x15e <main+0x10>
				}
			}
		}

		// --- OPCIÓN 2: ENVIAR ASCII ---
		else if (opcion == '2') {
 1bc:	82 33       	cpi	r24, 0x32	; 50
 1be:	b1 f4       	brne	.+44     	; 0x1ec <main+0x9e>
			UART_send_string("Envie un caracter para mostrar en LEDs. 'q' para salir:\r\n");
 1c0:	8c e7       	ldi	r24, 0x7C	; 124
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
			while (1) {
				char letra = UART_receive();  // Espera una letra por UART
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_receive>
 1cc:	c8 2f       	mov	r28, r24

				if (letra == 'q') break;      // Si es 'q', salir
 1ce:	81 37       	cpi	r24, 0x71	; 113
 1d0:	31 f2       	breq	.-116    	; 0x15e <main+0x10>

				PORTC = letra;  // Muestra el carácter en binario en los 8 LEDs conectados a PORTC
 1d2:	88 b9       	out	0x08, r24	; 8

				// Muestra también por texto qué carácter se recibió
				UART_send_string("Recibido: ");
 1d4:	86 eb       	ldi	r24, 0xB6	; 182
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
				UART_send(letra);
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 56 00 	call	0xac	; 0xac <UART_send>
				UART_send_string("\r\n");
 1e2:	81 ed       	ldi	r24, 0xD1	; 209
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
			}
 1ea:	ee cf       	rjmp	.-36     	; 0x1c8 <main+0x7a>
		}

		// --- Opción inválida ---
		else {
			UART_send_string("Opcion invalida.\r\n");
 1ec:	81 ec       	ldi	r24, 0xC1	; 193
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 5d 00 	call	0xba	; 0xba <UART_send_string>
 1f4:	b4 cf       	rjmp	.-152    	; 0x15e <main+0x10>

000001f6 <__itoa_ncheck>:
 1f6:	bb 27       	eor	r27, r27
 1f8:	4a 30       	cpi	r20, 0x0A	; 10
 1fa:	31 f4       	brne	.+12     	; 0x208 <__itoa_ncheck+0x12>
 1fc:	99 23       	and	r25, r25
 1fe:	22 f4       	brpl	.+8      	; 0x208 <__itoa_ncheck+0x12>
 200:	bd e2       	ldi	r27, 0x2D	; 45
 202:	90 95       	com	r25
 204:	81 95       	neg	r24
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	0c 94 07 01 	jmp	0x20e	; 0x20e <__utoa_common>

0000020c <__utoa_ncheck>:
 20c:	bb 27       	eor	r27, r27

0000020e <__utoa_common>:
 20e:	fb 01       	movw	r30, r22
 210:	55 27       	eor	r21, r21
 212:	aa 27       	eor	r26, r26
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	aa 1f       	adc	r26, r26
 21a:	a4 17       	cp	r26, r20
 21c:	10 f0       	brcs	.+4      	; 0x222 <__utoa_common+0x14>
 21e:	a4 1b       	sub	r26, r20
 220:	83 95       	inc	r24
 222:	50 51       	subi	r21, 0x10	; 16
 224:	b9 f7       	brne	.-18     	; 0x214 <__utoa_common+0x6>
 226:	a0 5d       	subi	r26, 0xD0	; 208
 228:	aa 33       	cpi	r26, 0x3A	; 58
 22a:	08 f0       	brcs	.+2      	; 0x22e <__utoa_common+0x20>
 22c:	a9 5d       	subi	r26, 0xD9	; 217
 22e:	a1 93       	st	Z+, r26
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	79 f7       	brne	.-34     	; 0x212 <__utoa_common+0x4>
 234:	b1 11       	cpse	r27, r1
 236:	b1 93       	st	Z+, r27
 238:	11 92       	st	Z+, r1
 23a:	cb 01       	movw	r24, r22
 23c:	0c 94 20 01 	jmp	0x240	; 0x240 <strrev>

00000240 <strrev>:
 240:	dc 01       	movw	r26, r24
 242:	fc 01       	movw	r30, r24
 244:	67 2f       	mov	r22, r23
 246:	71 91       	ld	r23, Z+
 248:	77 23       	and	r23, r23
 24a:	e1 f7       	brne	.-8      	; 0x244 <strrev+0x4>
 24c:	32 97       	sbiw	r30, 0x02	; 2
 24e:	04 c0       	rjmp	.+8      	; 0x258 <strrev+0x18>
 250:	7c 91       	ld	r23, X
 252:	6d 93       	st	X+, r22
 254:	70 83       	st	Z, r23
 256:	62 91       	ld	r22, -Z
 258:	ae 17       	cp	r26, r30
 25a:	bf 07       	cpc	r27, r31
 25c:	c8 f3       	brcs	.-14     	; 0x250 <strrev+0x10>
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
